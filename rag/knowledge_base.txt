// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

import "@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol";
import "@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol";

contract FundMe {
    using SafeMathChainlink for uint256;

    mapping(address => uint256) public addressToFund;
    address public owner;
    address[] public funders;

    constructor() public {
        owner = payable(msg.sender); // Set deployer as owner
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function!");
        _;
    }

    function fund() public payable {
        uint256 minimumUSD = 1 * 10 ** 18;
        require(getPrice(msg.value) >= minimumUSD, "You need to send more ETH!");
        addressToFund[msg.sender] += msg.value;
        funders.push(msg.sender);
    }

    function getPrice(uint256 ethAmt) public returns (uint256) {
        AggregatorV3Interface priceFeed = AggregatorV3Interface(
            0x694AA1769357215DE4FAC081bf1f309aDC325306
        );
        (, int256 answer, , , ) = priceFeed.latestRoundData();
        uint256 price = uint256(answer * 10000000000);
        return (price * ethAmt) / 1 ether;
    }

    function withdraw(address payable recipient, uint256 amount) public onlyOwner {
        require(address(this).balance >= amount, "Insufficient contract balance!");
        require(recipient != address(0), "Invalid recipient address!");
        recipient.transfer(amount);
    }

    // Fallback function to receive ETH
    receive() external payable {}
}

from brownie import FundMe, SimpleCollectible
from scripts.helper import get_account
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import json

address = get_account()
FundMe.deploy({"from":address})

OPENSEA_URL = "https://testnets.opensea.io/assets/{}/{}"

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Allow access from any origin
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["Authorization", "Content-Type"],
)

@app.get("/pay")
def payment(url:str,name:str, description:str, result:str, confidense:int):
    uri = {
    "name": f"{name}",
    "description": f"{description}",
    "image": f"{url}",
    "attributes": [
            {
                "Result": f"{result}",
                "value": str(confidense)
            }
        ]
    }
    json_uri = json.dumps(uri)

    fund_me = FundMe[-1]
    tx = fund_me.fund({"from": address, "value": 1703270342374390})
    simple_collectable = SimpleCollectible.deploy({"from":address})
    tx = simple_collectable.createCollectible(json_uri, {"from":address})
    tx.wait(1)
    print(f"You can view your nft at {OPENSEA_URL.format(simple_collectable.address, simple_collectable.tokenCounter() -1)}")
    tx = fund_me.withdraw({"from": address})
    print("Payment Transfered")



def main():
    uvicorn.run(app, port=9000, host="0.0.0.0")


.env file for the deployment
WEB3_INFURA_PROJECT_ID="Your Project Id"
PRIVATE_KEY="Your private Key"


brownie-config.yaml file

dotenv: .env
# Specifies the environment file (.env) to load environment variables from.
# This file typically contains sensitive information like private keys, API keys, etc.

wallets:
  from_key: ${PRIVATE_KEY}
  # Defines the wallet configuration, specifically the private key used for deployment and transactions.
  # The PRIVATE_KEY is securely stored in the .env file and accessed here using a placeholder.

dependencies:
  # Specifies external libraries or packages required for the project.
  # These are fetched from the respective repositories when the project is set up.
  - smartcontractkit/chainlink-brownie-contracts@1.1.0
    # Includes Chainlink's Brownie contracts library version 1.1.0.
    # Provides interfaces and contracts for interacting with Chainlink oracles and price feeds.
  - OpenZeppelin/openzeppelin-contracts@3.4.0
    # Includes OpenZeppelin's contracts library version 3.4.0.
    # Provides standard, secure, and reusable contracts for functionalities like ERC20, ERC721, etc.

compiler:
  solc:
    # Configures the Solidity compiler (solc).
    remappings:
      - "@chainlink=smartcontractkit/chainlink-brownie-contracts@1.1.0"
        # Maps the "@chainlink" prefix to the Chainlink Brownie contracts library for easy imports in Solidity files.
      - "@openzeppelin=OpenZeppelin/openzeppelin-contracts@3.4.0"
        # Maps the "@openzeppelin" prefix to the OpenZeppelin contracts library for easy imports in Solidity files.


An example of automation of python file for fundme

import os
import subprocess
from dotenv import load_dotenv

def create_and_deploy_contract():
    # 1. Create blockchain folder
    os.makedirs("blockchain", exist_ok=True)
    os.chdir("blockchain")

    # 2. Initialize Brownie project
    subprocess.run(["brownie", "init"], check=True)

    # 3. Get user input
    private_key = input("Enter your private key: ")
    infura_id = input("Enter your Infura Project ID: ")

    # 4. Create FundMe.sol
    with open("contracts/FundMe.sol", "w") as f:
        f.write("""
// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

import "@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol";
import "@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol";

contract FundMe {
    using SafeMathChainlink for uint256;

    mapping(address => uint256) public addressToFund;
    address public owner;
    address[] public funders;

    constructor() public {
        owner = msg.sender;
    }

    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }

    function fund() public payable {
        uint256 minimumUSD = 1 * 10 ** 18;
        require(getPrice(msg.value) >= minimumUSD, "You need to send more ETH!");
        addressToFund[msg.sender] += msg.value;
        funders.push(msg.sender);
    }

    function getPrice(uint256 ethAmt) public view returns (uint256) {
        AggregatorV3Interface priceFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306); // Sepolia ETH/USD
        (, int256 answer, , , ) = priceFeed.latestRoundData();
        uint256 price = uint256(answer * 10000000000);
        return (price * ethAmt) / 1 ether;
    }


    function withdraw(address payable recipient, uint256 amount) public onlyOwner {
        require(address(this).balance >= amount, "Insufficient contract balance!");
        require(recipient != address(0), "Invalid recipient address!");
        recipient.transfer(amount);
    }

    receive() external payable {}
}
        """)

    # 5. Create deploy.py
    with open("scripts/deploy.py", "w") as f:
        f.write("""
from brownie import FundMe, config, network
from scripts.helper import get_account

def deploy_fund_me():
    account = get_account()
    fund_me = FundMe.deploy({"from": account})
    print(f"Contract deployed to {fund_me.address}")
    return fund_me

def main():
    deploy_fund_me()
        """)

    #5.5 helper.py
    with open("scripts/helper.py", "w") as f:
        f.write("""
from brownie import accounts, config, network

def get_account():
    if network.show_active() == "development":
        return accounts[0]
    else:
        return accounts.add(config["wallets"]["from_key"])
""")



    # 6. Create .env file
    with open(".env", "w") as f:
        f.write(f"WEB3_INFURA_PROJECT_ID={infura_id}\nPRIVATE_KEY={private_key}")

    # 7. Create brownie-config.yaml
    with open("brownie-config.yaml", "w") as f:
        f.write("""
dotenv: .env
wallets:
  from_key: ${PRIVATE_KEY}
dependencies:
  - smartcontractkit/chainlink-brownie-contracts@1.1.0
  - OpenZeppelin/openzeppelin-contracts@3.4.0
compiler:
  solc:
    remappings:
      - '@chainlink=smartcontractkit/chainlink-brownie-contracts@1.1.0'
      - '@openzeppelin=OpenZeppelin/openzeppelin-contracts@3.4.0'

        """)

    # 8. Deploy the contract
    subprocess.run(["brownie", "run", "scripts/deploy.py", "--network", "sepolia"], check=True)



if __name__ == "__main__":
    create_and_deploy_contract()

For nft

// SPDX-License-Identifier: MIT
pragma solidity 0.6.6;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";

contract SimpleCollectible is ERC721 {
    uint256 public tokenCounter;

    constructor() public ERC721("Certificate", "DeepFakeCertification") {
        tokenCounter = 0;
    }

    function createCollectible(
        string memory tokenURI
    ) public returns (uint256) {
        uint256 newTokenId = tokenCounter;
        _safeMint(msg.sender, newTokenId);
        _setTokenURI(newTokenId, tokenURI);
        tokenCounter = tokenCounter + 1;
        return newTokenId;
    }
}

deploy for nft

from brownie import FundMe, SimpleCollectible
from scripts.helper import get_account
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import json

address = get_account()
FundMe.deploy({"from":address})

OPENSEA_URL = "https://testnets.opensea.io/assets/{}/{}"

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Allow access from any origin
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["Authorization", "Content-Type"],
)

@app.get("/pay")
def payment(url:str,name:str, description:str, result:str, confidense:int):
    uri = {
    "name": f"{name}",
    "description": f"{description}",
    "image": f"{url}",
    "attributes": [
            {
                "Result": f"{result}",
                "value": str(confidense)
            }
        ]
    }
    json_uri = json.dumps(uri)

    fund_me = FundMe[-1]
    tx = fund_me.fund({"from": address, "value": 1703270342374390})
    simple_collectable = SimpleCollectible.deploy({"from":address})
    tx = simple_collectable.createCollectible(json_uri, {"from":address})
    tx.wait(1)
    print(f"You can view your nft at {OPENSEA_URL.format(simple_collectable.address, simple_collectable.tokenCounter() -1)}")
    tx = fund_me.withdraw({"from": address})
    print("Payment Transfered")



def main():
    uvicorn.run(app, port=9000, host="0.0.0.0")


an example for automating nft deployment

import os
import subprocess
from dotenv import load_dotenv

def create_and_deploy_contract():
    # 1. Create blockchain folder
    os.makedirs("blockchain", exist_ok=True)
    os.chdir("blockchain")

    # 2. Initialize Brownie project
    subprocess.run(["brownie", "init"], check=True)

    # 3. Get user input
    private_key = input("Enter your private key: ")
    infura_id = input("Enter your Infura Project ID: ")

    # 4. Create SimpleCollectible.sol
    with open("contracts/SimpleCollectible.sol", "w") as f:
        f.write("""
// SPDX-License-Identifier: MIT
pragma solidity 0.6.6;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";

contract SimpleCollectible is ERC721 {
    uint256 public tokenCounter;

    constructor() public ERC721("Certificate", "DeepFakeCertification") {
        tokenCounter = 0;
    }

    function createCollectible(string memory tokenURI) public returns (uint256) {
        uint256 newTokenId = tokenCounter;
        _safeMint(msg.sender, newTokenId);
        _setTokenURI(newTokenId, tokenURI);
        tokenCounter = tokenCounter + 1;
        return newTokenId;
    }
}
        """)

    # 5. Create deploy.py
    with open("scripts/deploy.py", "w") as f:
        f.write("""
from brownie import SimpleCollectible, config, network
from scripts.helper import get_account

def deploy_simple_collectible():
    account = get_account()
    simple_collectible = SimpleCollectible.deploy({"from": account})
    print(f"Contract deployed to {simple_collectible.address}")
    return simple_collectible

def main():
    deploy_simple_collectible()
        """)

    # 5.5 helper.py
    with open("scripts/helper.py", "w") as f:
        f.write("""
from brownie import accounts, config, network

def get_account():
    if network.show_active() == "development":
        return accounts[0]
    else:
        return accounts.add(config["wallets"]["from_key"])
""")

    # 6. Create .env file
    with open(".env", "w") as f:
        f.write(f"WEB3_INFURA_PROJECT_ID={infura_id}\nPRIVATE_KEY={private_key}")

    # 7. Create brownie-config.yaml
    with open("brownie-config.yaml", "w") as f:
        f.write("""
dotenv: .env
wallets:
  from_key: ${PRIVATE_KEY}
dependencies:
  - OpenZeppelin/openzeppelin-contracts@3.4.0
compiler:
  solc:
    remappings:
      - '@openzeppelin=OpenZeppelin/openzeppelin-contracts@3.4.0'
        """)

    # 8. Deploy the contract
    subprocess.run(["brownie", "run", "scripts/deploy.py", "--network", "sepolia"], check=True)

if __name__ == "__main__":
    create_and_deploy_contract()


Interact with deployed contracts using python and Fast api. Example

import os
import json
import dotenv
import datetime
from PIL import Image
from web3 import Web3
from fastapi import APIRouter
from pydantic import BaseModel
from utils import file_to_sha256
from brownie.project import get_loaded_projects
from brownie.network.account import LocalAccount
from brownie import project, network, accounts, Contract
from concurrent.futures import ThreadPoolExecutor, as_completed

# Load environment variables from a `.env` file
dotenv.load_dotenv()

# Initialize a FastAPI router for blockchain-related endpoints
bchain_router = APIRouter(tags=['bchain'])

# Load a Brownie project for blockchain interaction
p = project.load('blockchain')  # Specify the path to the project folder
network.connect('polygon')  # Connect to the Polygon network

# Load the contract object from the Brownie project
SimpleCollectible = p.SimpleCollectible
get_loaded_projects()[0].load_config()  # Load Brownie's configuration for the project
print(get_loaded_projects()[0])  # Print project details for debugging

# Function to get a blockchain account using a private key from the environment
def get_account() -> LocalAccount:
    return accounts.add(os.environ.get('PRIVATE_KEY'))  # Load private key from environment variables

# Retrieve the blockchain account
account = get_account()
print(account)  # Print account details for debugging

# Function to either deploy a new contract or retrieve an existing one
def get_or_deploy_contract():
    # File to store the address of the deployed contract
    deploy_file = 'deployed_address.txt'
    
    if os.path.exists(deploy_file):  # Check if the contract address file exists
        with open(deploy_file, 'r') as f:
            contract_address = f.read().strip()
        print(f"Loading existing contract at {contract_address}")
        return Contract.from_abi("SimpleCollectible", contract_address, SimpleCollectible.abi)  # Load existing contract
    else:
        print("Deploying new contract")
        # Deploy a new contract if not already deployed
        contract = SimpleCollectible.deploy({"from": account, "gas_price": Web3.to_wei("4", "gwei")})
        with open(deploy_file, 'w') as f:
            f.write(contract.address)  # Save the deployed contract address
        return contract

# Retrieve or deploy the SimpleCollectible contract
simple_collectible = get_or_deploy_contract()
account = get_account()  # Ensure the account is loaded

# Define a data model for the input to the minting API endpoint
class PostData(BaseModel):
    user_address: str  # Address of the user minting the NFT
    file_uid: str      # Unique identifier of the file
    transction_id: str = 'xxx'  # Optional transaction ID, default value is 'xxx'

# Base URL for viewing NFTs on the Polygon blockchain
nft_url = "https://cardona-zkevm.polygonscan.com/nft/{}/{}"

# API endpoint to mint a new NFT certificate
@bchain_router.post('/mint_certificate')
async def mint_certificate(post_data: PostData):
    # Compute the SHA256 hash of the file
    file_hash = file_to_sha256(f'assets/{post_data.file_uid}')
    client_address = post_data.user_address  # Address of the client minting the NFT
    image_url = ""  # Placeholder for the image URL associated with the NFT
    
    # Metadata for the NFT
    uri = {
        "name": "Deep Fake Certification",
        "description": "Deep Fake Certification",
        "image": image_url,
        "file_hash": file_hash,
        "attributes": [""]  # Customizable attributes for the NFT
    }
    json_uri = json.dumps(uri)  # Convert the metadata to a JSON string
    
    # Call the contract's `createCollectible` function to mint the NFT
    tx = simple_collectible.createCollectible(json_uri, client_address,
                                              {"from": account, "gas_price": Web3.to_wei("4", "gwei")})
    tx.wait(1)  # Wait for the transaction to be confirmed
    token_id = simple_collectible.tokenCounter() - 1  # Retrieve the newly minted token's ID
    uri = simple_collectible.tokenURI(token_id)  # Retrieve the token's metadata URI
    
    # Format the PolygonScan URL for viewing the NFT
    nft_url_formatted = nft_url.format(simple_collectible.address, token_id)
    
    # Return relevant details about the minted NFT
    return {
        "polygon_url": nft_url_formatted,
        'certificate_url': image_url,
        'token_id': token_id,
        'token_uri': uri
    }

# API endpoint to get all NFTs owned by a specific user
@bchain_router.get('/cert/{user_address}')
async def get_user_nfts(user_address: str):
    try:
        user_address = Web3.to_checksum_address(user_address)  # Convert address to checksum format
        total_supply = simple_collectible.tokenCounter()  # Get the total number of tokens minted

        # Function to check ownership and retrieve NFT details
        def check_and_get_nft(token_id):
            if simple_collectible.ownerOf(token_id) == user_address:  # Check if the user owns the token
                uri = simple_collectible.tokenURI(token_id)  # Get the token's metadata URI
                polygon_url = nft_url.format(simple_collectible.address, token_id)  # Format PolygonScan URL
                return {
                    "token_id": token_id,
                    "uri": json.loads(uri),  # Parse the metadata URI JSON
                    "polygon_url": polygon_url
                }
            return None

        # Use multithreading to fetch NFTs in parallel
        with ThreadPoolExecutor(max_workers=10) as executor:
            futures = [executor.submit(check_and_get_nft, token_id) for token_id in range(total_supply)]
            user_nfts = [nft for nft in (future.result() for future in as_completed(futures)) if nft]

        # Return all NFTs owned by the user
        return {"user_address": user_address, "nfts": user_nfts}
    except Exception as e:
        return {"error": f"Error getting user NFTs: {str(e)}"}

# API endpoint to retrieve the metadata URI for a specific token
@bchain_router.get('/get_token_uri/{token_id}')
async def get_token_uri(token_id: int):
    try:
        if not simple_collectible:  # Check if the contract is deployed
            return {"error": "Contract not deployed"}
        uri = simple_collectible.tokenURI(token_id)  # Retrieve the token's metadata URI
        return {"token_id": token_id, "uri": json.loads(uri)}  # Return the parsed metadata
    except Exception as e:
        return {"error": f"Error getting tokenURI: {str(e)}"}






